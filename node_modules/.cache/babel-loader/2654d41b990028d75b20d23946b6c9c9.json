{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\salou0\\\\WebstormProjects\\\\react-app\\\\src\\\\ContactForm.react.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FIELDS = ['name', 'gender', 'phone', 'street', 'city'];\nexport class ContactForm extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      selectedOption: null\n    };\n    this.gender = {\n      selectedOption: null\n    };\n    this.GENDER_OPTIONS = [{\n      value: 'Male',\n      name: 'Male'\n    }, {\n      value: 'Female',\n      name: 'Female'\n    }, {\n      value: 'Other',\n      name: 'Other'\n    }];\n\n    this.setFormRef = form => {\n      this.formElement = form;\n    };\n\n    this.renderInput = (name, label, value) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ContactFormField\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          \"data-id\": `${name}-label`,\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          \"data-id\": name,\n          name: name,\n          type: \"text\",\n          defaultValue: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.handleChange = selectedOption => {\n      this.setState({\n        selectedOption\n      });\n    };\n\n    this.renderSelect = (name, label, value) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ContactFormField\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          \"data-id\": `${name}-label`,\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          defaultValue: value,\n          name: name,\n          \"data-id\": name,\n          onChange: this.handleChange,\n          children: this.GENDER_OPTIONS.map((e, key) => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: e.value,\n              children: e.name\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 20\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this);\n    };\n\n    this.renderError = () => {\n      const {\n        error\n      } = this.state;\n      if (!error) return null;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-id\": \"error-message\",\n        className: \"FormError\",\n        children: error.toString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 12\n      }, this);\n    };\n\n    this.getInputValue = name => {\n      const input = this.formElement ? this.formElement.querySelector(`[name=\"${name}\"]`) : null;\n      return input ? input.value : null;\n    };\n\n    this.onSave = event => {\n      event.preventDefault();\n      this.setState({\n        error: null\n      }, () => {\n        const {\n          onSave\n        } = this.props;\n\n        if (!onSave) {\n          return;\n        }\n\n        try {\n          const existing = this.props.contact;\n          const contact = existing ? { ...existing\n          } : {};\n\n          for (const field of FIELDS) {\n            contact[field] = this.getInputValue(field);\n            assertTextValue(field, contact[field]);\n          }\n\n          onSave(contact);\n        } catch (err) {\n          this.setState({\n            error: err\n          });\n        }\n      });\n    };\n\n    this.onCancel = event => {\n      const {\n        onCancel\n      } = this.props;\n      if (onCancel) onCancel();\n    };\n  }\n\n  render() {\n    const contact = this.props.contact || {};\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"ContactForm\",\n      \"data-id\": \"contact-form\",\n      onSubmit: this.onSave,\n      ref: this.setFormRef,\n      children: [this.renderInput('name', 'Name', contact.name), this.renderSelect('gender', 'Gender', contact.gender), this.renderInput('phone', 'Phone', contact.phone), this.renderInput('street', 'Street', contact.street), this.renderInput('city', 'City', contact.city), this.renderError(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ContactFormButtons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          \"data-id\": \"save-button\",\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          \"data-id\": \"cancel-button\",\n          onClick: this.onCancel,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction isEmpty(str) {\n  return !str || /^\\s*$/.test(str);\n}\n\nfunction assertTextValue(name, value) {\n  if (isEmpty(value)) {\n    throw new Error(`The \"${name}\" field can't be empty.`);\n  }\n}","map":{"version":3,"sources":["C:/Users/salou0/WebstormProjects/react-app/src/ContactForm.react.js"],"names":["React","FIELDS","ContactForm","Component","state","selectedOption","gender","GENDER_OPTIONS","value","name","setFormRef","form","formElement","renderInput","label","handleChange","setState","renderSelect","map","e","key","renderError","error","toString","getInputValue","input","querySelector","onSave","event","preventDefault","props","existing","contact","field","assertTextValue","err","onCancel","render","phone","street","city","isEmpty","str","test","Error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,MAAM,GAAG,CAAC,MAAD,EAAS,QAAT,EAAmB,OAAnB,EAA4B,QAA5B,EAAsC,MAAtC,CAAf;AAEA,OAAO,MAAMC,WAAN,SAA0BF,KAAK,CAACG,SAAhC,CAA0C;AAAA;AAAA;AAAA,SAC/CC,KAD+C,GACvC;AACNC,MAAAA,cAAc,EAAE;AADV,KADuC;AAAA,SAK/CC,MAL+C,GAKtC;AACPD,MAAAA,cAAc,EAAE;AADT,KALsC;AAAA,SAS/CE,cAT+C,GAS9B,CACf;AAAEC,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,IAAI,EAAE;AAAvB,KADe,EAEf;AAAED,MAAAA,KAAK,EAAE,QAAT;AAAmBC,MAAAA,IAAI,EAAE;AAAzB,KAFe,EAGf;AAAED,MAAAA,KAAK,EAAE,OAAT;AAAkBC,MAAAA,IAAI,EAAE;AAAxB,KAHe,CAT8B;;AAAA,SAsC/CC,UAtC+C,GAsClCC,IAAI,IAAI;AACnB,WAAKC,WAAL,GAAmBD,IAAnB;AACD,KAxC8C;;AAAA,SA0C/CE,WA1C+C,GA0CjC,CAACJ,IAAD,EAAOK,KAAP,EAAcN,KAAd,KAAwB;AACpC,0BACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACE;AAAO,qBAAU,GAAEC,IAAK,QAAxB;AAAA,oBAAkCK;AAAlC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,qBAASL,IAAhB;AAAsB,UAAA,IAAI,EAAEA,IAA5B;AAAkC,UAAA,IAAI,EAAC,MAAvC;AAA8C,UAAA,YAAY,EAAED;AAA5D;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAMD,KAjD8C;;AAAA,SAmD/CO,YAnD+C,GAmD/BV,cAAD,IAAoB;AACjC,WAAKW,QAAL,CAAc;AAAEX,QAAAA;AAAF,OAAd;AACD,KArD8C;;AAAA,SAuD/CY,YAvD+C,GAuDhC,CAACR,IAAD,EAAOK,KAAP,EAAcN,KAAd,KAAwB;AACrC,0BACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACA;AAAO,qBAAU,GAAEC,IAAK,QAAxB;AAAA,oBAAkCK;AAAlC;AAAA;AAAA;AAAA;AAAA,gBADA,eAEA;AAAQ,UAAA,YAAY,EAAEN,KAAtB;AAA6B,UAAA,IAAI,EAAEC,IAAnC;AAAyC,qBAASA,IAAlD;AAAwD,UAAA,QAAQ,EAAE,KAAKM,YAAvE;AAAA,oBACG,KAAKR,cAAL,CAAoBW,GAApB,CAAwB,CAACC,CAAD,EAAIC,GAAJ,KAAY;AACnC,gCAAO;AAAkB,cAAA,KAAK,EAAED,CAAC,CAACX,KAA3B;AAAA,wBAAmCW,CAAC,CAACV;AAArC,eAAaW,GAAb;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD,WAFA;AADH;AAAA;AAAA;AAAA;AAAA,gBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AASA,KAjE6C;;AAAA,SAmE/CC,WAnE+C,GAmEjC,MAAM;AAClB,YAAM;AAACC,QAAAA;AAAD,UAAU,KAAKlB,KAArB;AACA,UAAI,CAACkB,KAAL,EAAY,OAAO,IAAP;AAEZ,0BAAO;AAAK,mBAAQ,eAAb;AAA6B,QAAA,SAAS,EAAC,WAAvC;AAAA,kBAAoDA,KAAK,CAACC,QAAN;AAApD;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAxE8C;;AAAA,SA0E/CC,aA1E+C,GA0E/Bf,IAAI,IAAI;AACtB,YAAMgB,KAAK,GAAG,KAAKb,WAAL,GACV,KAAKA,WAAL,CAAiBc,aAAjB,CAAgC,UAASjB,IAAK,IAA9C,CADU,GAEV,IAFJ;AAGA,aAAOgB,KAAK,GAAGA,KAAK,CAACjB,KAAT,GAAiB,IAA7B;AACD,KA/E8C;;AAAA,SAiF/CmB,MAjF+C,GAiFtCC,KAAK,IAAI;AAChBA,MAAAA,KAAK,CAACC,cAAN;AACA,WAAKb,QAAL,CAAc;AAACM,QAAAA,KAAK,EAAE;AAAR,OAAd,EAA6B,MAAM;AACjC,cAAM;AAACK,UAAAA;AAAD,YAAW,KAAKG,KAAtB;;AACA,YAAI,CAACH,MAAL,EAAa;AACX;AACD;;AACD,YAAI;AACF,gBAAMI,QAAQ,GAAG,KAAKD,KAAL,CAAWE,OAA5B;AACA,gBAAMA,OAAO,GAAGD,QAAQ,GAAG,EAAC,GAAGA;AAAJ,WAAH,GAAmB,EAA3C;;AACA,eAAK,MAAME,KAAX,IAAoBhC,MAApB,EAA4B;AAC1B+B,YAAAA,OAAO,CAACC,KAAD,CAAP,GAAiB,KAAKT,aAAL,CAAmBS,KAAnB,CAAjB;AACAC,YAAAA,eAAe,CAACD,KAAD,EAAQD,OAAO,CAACC,KAAD,CAAf,CAAf;AACD;;AACDN,UAAAA,MAAM,CAACK,OAAD,CAAN;AACD,SARD,CAQE,OAAOG,GAAP,EAAY;AACZ,eAAKnB,QAAL,CAAc;AAACM,YAAAA,KAAK,EAAEa;AAAR,WAAd;AACD;AACF,OAhBD;AAiBD,KApG8C;;AAAA,SAsG/CC,QAtG+C,GAsGpCR,KAAK,IAAI;AAClB,YAAM;AAACQ,QAAAA;AAAD,UAAa,KAAKN,KAAxB;AACA,UAAIM,QAAJ,EAAcA,QAAQ;AACvB,KAzG8C;AAAA;;AAe/CC,EAAAA,MAAM,GAAG;AACP,UAAML,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAAX,IAAsB,EAAtC;AACA,wBACE;AACE,MAAA,SAAS,EAAC,aADZ;AAEE,iBAAQ,cAFV;AAGE,MAAA,QAAQ,EAAE,KAAKL,MAHjB;AAIE,MAAA,GAAG,EAAE,KAAKjB,UAJZ;AAAA,iBAMG,KAAKG,WAAL,CAAiB,MAAjB,EAAyB,MAAzB,EAAiCmB,OAAO,CAACvB,IAAzC,CANH,EAOG,KAAKQ,YAAL,CAAkB,QAAlB,EAA4B,QAA5B,EAAsCe,OAAO,CAAC1B,MAA9C,CAPH,EAQG,KAAKO,WAAL,CAAiB,OAAjB,EAA0B,OAA1B,EAAmCmB,OAAO,CAACM,KAA3C,CARH,EASG,KAAKzB,WAAL,CAAiB,QAAjB,EAA2B,QAA3B,EAAqCmB,OAAO,CAACO,MAA7C,CATH,EAUG,KAAK1B,WAAL,CAAiB,MAAjB,EAAyB,MAAzB,EAAiCmB,OAAO,CAACQ,IAAzC,CAVH,EAWG,KAAKnB,WAAL,EAXH,eAYE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA,gCACE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,qBAAQ,aAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,qBAAQ,eAA9B;AAA8C,UAAA,OAAO,EAAE,KAAKe,QAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAmBD;;AApC8C;;AA4GjD,SAASK,OAAT,CAAiBC,GAAjB,EAAsB;AACpB,SAAQ,CAACA,GAAD,IAAQ,QAAQC,IAAR,CAAaD,GAAb,CAAhB;AACD;;AAED,SAASR,eAAT,CAAyBzB,IAAzB,EAA+BD,KAA/B,EAAsC;AACpC,MAAIiC,OAAO,CAACjC,KAAD,CAAX,EAAoB;AAClB,UAAM,IAAIoC,KAAJ,CAAW,QAAOnC,IAAK,yBAAvB,CAAN;AACD;AACF","sourcesContent":["import React from 'react';\r\n\r\nconst FIELDS = ['name', 'gender', 'phone', 'street', 'city'];\r\n\r\nexport class ContactForm extends React.Component {\r\n  state = {\r\n    selectedOption: null,\r\n  }\r\n\r\n  gender = {\r\n    selectedOption: null,\r\n  }\r\n\r\n  GENDER_OPTIONS = [\r\n    { value: 'Male', name: 'Male' },\r\n    { value: 'Female', name: 'Female' },\r\n    { value: 'Other', name: 'Other' },\r\n  ];\r\n\r\n  render() {\r\n    const contact = this.props.contact || {};\r\n    return (\r\n      <form\r\n        className=\"ContactForm\"\r\n        data-id=\"contact-form\"\r\n        onSubmit={this.onSave}\r\n        ref={this.setFormRef}\r\n      >\r\n        {this.renderInput('name', 'Name', contact.name)}\r\n        {this.renderSelect('gender', 'Gender', contact.gender)}\r\n        {this.renderInput('phone', 'Phone', contact.phone)}\r\n        {this.renderInput('street', 'Street', contact.street)}\r\n        {this.renderInput('city', 'City', contact.city)}\r\n        {this.renderError()}\r\n        <div className=\"ContactFormButtons\">\r\n          <button type=\"submit\" data-id=\"save-button\">Save</button>\r\n          <button type=\"button\" data-id=\"cancel-button\" onClick={this.onCancel}>Cancel</button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n\r\n  setFormRef = form => {\r\n    this.formElement = form;\r\n  };\r\n\r\n  renderInput = (name, label, value) => {\r\n    return (\r\n      <div className=\"ContactFormField\">\r\n        <label data-id={`${name}-label`}>{label}</label>\r\n        <input data-id={name} name={name} type=\"text\" defaultValue={value} />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  handleChange = (selectedOption) => {\r\n    this.setState({ selectedOption });\r\n  }\r\n\r\n  renderSelect = (name, label, value) => {\r\n    return (\r\n        <div className=\"ContactFormField\">\r\n        <label data-id={`${name}-label`}>{label}</label>\r\n        <select defaultValue={value} name={name} data-id={name} onChange={this.handleChange}>\r\n          {this.GENDER_OPTIONS.map((e, key) => {\r\n            return <option key={key} value={e.value}>{e.name}</option>;\r\n          })}\r\n        </select>\r\n        </div>\r\n  )};\r\n\r\n  renderError = () => {\r\n    const {error} = this.state;\r\n    if (!error) return null;\r\n\r\n    return <div data-id=\"error-message\" className=\"FormError\">{error.toString()}</div>;\r\n  };\r\n\r\n  getInputValue = name => {\r\n    const input = this.formElement\r\n      ? this.formElement.querySelector(`[name=\"${name}\"]`)\r\n      : null;\r\n    return input ? input.value : null;\r\n  };\r\n\r\n  onSave = event => {\r\n    event.preventDefault();\r\n    this.setState({error: null}, () => {\r\n      const {onSave} = this.props;\r\n      if (!onSave) {\r\n        return;\r\n      }\r\n      try {\r\n        const existing = this.props.contact;\r\n        const contact = existing ? {...existing} : {};\r\n        for (const field of FIELDS) {\r\n          contact[field] = this.getInputValue(field);\r\n          assertTextValue(field, contact[field]);\r\n        }\r\n        onSave(contact);\r\n      } catch (err) {\r\n        this.setState({error: err});\r\n      }\r\n    });\r\n  };\r\n\r\n  onCancel = event => {\r\n    const {onCancel} = this.props;\r\n    if (onCancel) onCancel();\r\n  };\r\n}\r\n\r\nfunction isEmpty(str) {\r\n  return (!str || /^\\s*$/.test(str));\r\n}\r\n\r\nfunction assertTextValue(name, value) {\r\n  if (isEmpty(value)) {\r\n    throw new Error(`The \"${name}\" field can't be empty.`);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}